(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{169:function(_,a,v){"use strict";v.r(a);var t=v(0),r=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,a=_.$createElement,v=_._self._c||a;return v("div",{staticClass:"content"},[v("h2",{attrs:{id:"拯救微机原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拯救微机原理","aria-hidden":"true"}},[_._v("#")]),_._v(" 拯救微机原理")]),_._v(" "),v("h3",{attrs:{id:"_1-7种寻址方式中操作数的位置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7种寻址方式中操作数的位置","aria-hidden":"true"}},[_._v("#")]),_._v(" 1 .  7种寻址方式中操作数的位置")]),_._v(" "),v("ul",[v("li",[_._v("立即寻址：操作数作为指令的一部分而直接写在指令中，这种操作数称为立即数，立即数（操作数）紧跟在"),v("strong",[_._v("操作码")]),_._v("之后")]),_._v(" "),v("li",[_._v("寄存器寻址：操作数存储在某"),v("strong",[_._v("寄存器")]),_._v("中，或把目标操作数存入寄存器")]),_._v(" "),v("li",[_._v("直接寻址方式：指令所要的操作数存放在"),v("strong",[_._v("内存")]),_._v("中，在指令中直接给出该操作数的有效位置")]),_._v(" "),v("li",[_._v("寄存器间接寻址方式：操作数在"),v("strong",[_._v("寄存器")]),_._v("中，操作数的有效地址用SI、DI、BX和BP等四个寄存器之一来指定")]),_._v(" "),v("li",[_._v("寄存器相对寻址：操作数在"),v("strong",[_._v("存储器")]),_._v("中，其有效地址是一个基址寄存器(BX、BP)"),v("strong",[_._v("或")]),_._v("变址寄存器(SI、DI)的内容和指令中的8bit、16bit偏移量之和")]),_._v(" "),v("li",[_._v("基址加变址寻址方式：操作数在"),v("strong",[_._v("存储器")]),_._v("中，其有效地址是一个基址寄存器(BX、BP)"),v("strong",[_._v("和")]),_._v("一个变址寄存器（SI、DI）的内容之和")]),_._v(" "),v("li",[_._v("相对基址加变址寻址方式：操作数在"),v("strong",[_._v("存储器")]),_._v("中，其有效地址是一个基址寄存器(BX、BP)的值、一个变址寄存器（SI、DI）的值和指令中的8bit、16bit偏移量之和")])]),_._v(" "),v("h3",{attrs:{id:"_2-微机系统的组成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-微机系统的组成","aria-hidden":"true"}},[_._v("#")]),_._v(" 2.  微机系统的组成")]),_._v(" "),v("p",[_._v("一个微机系统是由"),v("strong",[_._v("硬件系统")]),_._v("和"),v("strong",[_._v("软件系统")]),_._v("组成的，若要细分，则如下:")]),_._v(" "),v("ul",[v("li",[_._v("软件系统：系统软件和应用软件")]),_._v(" "),v("li",[_._v("硬件系统：运算器、存储器、输入与输出设备和控制器（四大部分）")])]),_._v(" "),v("h3",{attrs:{id:"_3-8086的biu与eu的组成与作用是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-8086的biu与eu的组成与作用是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 3.  8086的BIU与EU的组成与作用是什么？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("BIU(Bus Interface Unit)：总线接口单元，由"),v("strong",[_._v("段寄存器")]),_._v("、"),v("strong",[_._v("指令指针寄存器IP")]),_._v("、"),v("strong",[_._v("指令队列")]),_._v("、"),v("strong",[_._v("地址加法器")]),_._v("以及"),v("strong",[_._v("总线控制逻辑")]),_._v("组成；"),v("strong",[_._v("负责CPU与存储器、I/O接口之间的信息 （包括数据、地址、控制命令等）传送")]),_._v("， 包括生成访问存储器所需的20位的物理地址、不断从内存中取指令并送到指令队列、以及配合EU对指定的内存单元或者外设端口进行数据存取操作")])]),_._v(" "),v("li",[v("p",[_._v("EU(Execution Unit)：执行单元，由"),v("strong",[_._v("算术逻辑运算单元ALU")]),_._v("、"),v("strong",[_._v("暂存器")]),_._v("、"),v("strong",[_._v("标志寄存器（即PSW寄存器）")]),_._v("、"),v("strong",[_._v("通用寄存器组和EU控制器")]),_._v("构成；其"),v("strong",[_._v("作用")]),_._v("为"),v("strong",[_._v("执行指令")]),_._v("，进行全部算术逻辑运算、完成偏移地址的计算，向BIU提供指令执行结果的数据和访问存储器需要的偏移地址，并对通用寄存器和标志寄存器进行管理")])])]),_._v(" "),v("h3",{attrs:{id:"_4-高档微机主要有哪些传输速率不同的总线？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-高档微机主要有哪些传输速率不同的总线？","aria-hidden":"true"}},[_._v("#")]),_._v(" 4.高档微机主要有哪些传输速率不同的总线？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("串行总线：二进制数据逐位通过一根数据线发送到目的器件")])]),_._v(" "),v("li",[v("p",[_._v("并行总线：数据线通常超过两根")])])]),_._v(" "),v("h3",{attrs:{id:"_5-cpu的外部时钟频率、倍频系数、前端总线频率、每时钟周期传送的数据位数与cpu的工作频率之间的关系是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-cpu的外部时钟频率、倍频系数、前端总线频率、每时钟周期传送的数据位数与cpu的工作频率之间的关系是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.  CPU的外部时钟频率、倍频系数、前端总线频率、每时钟周期传送的数据位数与CPU的工作频率之间的关系是什么？")]),_._v(" "),v("p",[_._v("外部时钟频率")]),_._v(" "),v("h3",{attrs:{id:"_6-指令操作数的寻址方式的判断"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-指令操作数的寻址方式的判断","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.  指令操作数的寻址方式的判断")]),_._v(" "),v("p",[_._v("参考第一题")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("立即寻址：操作数直接放在指令里，如 "),v("strong",[_._v("MOV AX, 3")])])]),_._v(" "),v("li",[v("p",[_._v("寄存器寻址：操作数放在某个寄存器中，如 "),v("strong",[_._v("MOV AX,BX")])])]),_._v(" "),v("li",[v("p",[_._v("直接寻址：操作数的地址直接放在指令里，如 "),v("strong",[_._v("MOV AX, [0010H]")])])]),_._v(" "),v("li",[v("p",[_._v("寄存器间接寻址：和寄存器寻址的区别是，BX里存的不是操作数，而是操作数的地址。如 "),v("strong",[_._v("MOV AX,[BX]")])])]),_._v(" "),v("li",[v("p",[_._v("寄存器相对寻址：其有效地址是一个基址寄存器(BX、BP)"),v("strong",[_._v("或")]),_._v("变址寄存器(SI、DI)的内容和指令中的8bit、16bit偏移量之和，如："),v("strong",[_._v("MOV AX [BX+100H]")])])]),_._v(" "),v("li",[v("p",[_._v("基址加变址寻址方式：其有效地址是一个基址寄存器(BX、BP)"),v("strong",[_._v("和")]),_._v("一个变址寄存器（SI、DI）的内容之和，如："),v("strong",[_._v("MOV BX,[BX+SI]")])])]),_._v(" "),v("li",[v("p",[_._v("相对基址加变址寻址方式:其有效地址是一个基址寄存器(BX、BP)的值、一个变址寄存器（SI、DI）的值和指令中的8bit、16bit偏移量之和,如"),v("strong",[_._v("MOV AX, [BX+SI+200H]")])])])]),_._v(" "),v("h3",{attrs:{id:"_7-堆栈的概念、push、pop指令的含义、sp的含义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-堆栈的概念、push、pop指令的含义、sp的含义","aria-hidden":"true"}},[_._v("#")]),_._v(" 7. 堆栈的概念、push、pop指令的含义、sp的含义")]),_._v(" "),v("p",[v("strong",[_._v("堆栈")]),_._v("：以**后进先出(Last In First Out)**的规则存取信息的一种存储机构")]),_._v(" "),v("p",[v("strong",[_._v("push指令")]),_._v("：进栈指令，将信息送入堆栈；书上原句为：将SRC或标志寄存器FLAG的内容送入堆栈，并修正堆栈指针的内容。")]),_._v(" "),v("p",[v("strong",[_._v("pop指令")]),_._v("：出栈指令，从堆栈中取出信息；书上原句为：将SP所指出的栈顶内容取出，并送入DST所指寄存器、内存某单元或标志寄存器FLAG，并修正SP内容。")]),_._v(" "),v("p",[v("strong",[_._v("SP")]),_._v("：SP为堆栈指针寄存器，用来存放堆栈区的偏移地址。时刻指向栈顶。")]),_._v(" "),v("h3",{attrs:{id:"_8-操作系统是最重要的系统软件，其被存放在主机板上的什么部件中？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-操作系统是最重要的系统软件，其被存放在主机板上的什么部件中？","aria-hidden":"true"}},[_._v("#")]),_._v(" 8. 操作系统是最重要的系统软件，其被存放在主机板上的什么部件中？")]),_._v(" "),v("p",[_._v("ROM BIOS")]),_._v(" "),v("h3",{attrs:{id:"_9-操作系统的作用是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-操作系统的作用是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 9. 操作系统的作用是什么？")]),_._v(" "),v("p",[_._v("控制和管理计算机系统内各种硬件和软件资源，合理有效的组织计算机系统的工作，为用户提供一个使用方便可扩展的工作环境，从而起到连接计算机和用户的接口作用")]),_._v(" "),v("h3",{attrs:{id:"_10-org伪指令的含义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-org伪指令的含义","aria-hidden":"true"}},[_._v("#")]),_._v(" 10.ORG伪指令的含义")]),_._v(" "),v("p",[_._v("指明该语句下面的程序在段内的起始位置；也即指明代码在内存中的存放位置")]),_._v(" "),v("h3",{attrs:{id:"_11-偏移地址、逻辑地址、物理地址的概念及计算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-偏移地址、逻辑地址、物理地址的概念及计算","aria-hidden":"true"}},[_._v("#")]),_._v(" 11.偏移地址、逻辑地址、物理地址的概念及计算")]),_._v(" "),v("ul",[v("li",[_._v("偏移地址：相对于某个地址（段地址）的偏移量")]),_._v(" "),v("li",[_._v("逻辑地址：就是段地址，即每一段的段首地址")]),_._v(" "),v("li",[_._v("物理地址：存储单元的实际地址编码，等于16（10H）*段地址+段内偏移地址")])]),_._v(" "),v("h3",{attrs:{id:"_12-一些寄存器所对应的段寄存器是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-一些寄存器所对应的段寄存器是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 12. 一些寄存器所对应的段寄存器是什么？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("代码段寄存器CS")])]),_._v(" "),v("li",[v("p",[_._v("数据段寄存器DS")])]),_._v(" "),v("li",[v("p",[_._v("堆栈段寄存器SS")])]),_._v(" "),v("li",[v("p",[_._v("附加段寄存器ES")])])]),_._v(" "),v("h3",{attrs:{id:"_13-什么是系统软件？什么是应用软件？举出你所知道的系统软件和应用软件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-什么是系统软件？什么是应用软件？举出你所知道的系统软件和应用软件","aria-hidden":"true"}},[_._v("#")]),_._v(" 13.什么是系统软件？什么是应用软件？举出你所知道的系统软件和应用软件")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("系统软件：计算机在运行这些程序时，为其他程序的开发、调试、运行等建立一个良好的环境，能方便地输入程序，作好执行前的准备处理以及可靠运行程序，一般是专业公司开发或计算机厂商提供。如：操作系统、数据库管理等")])]),_._v(" "),v("li",[v("p",[_._v("应用软件：是系统用户为解决自己特定问题需要而开发或购买的程序。如：word、excel、vscode、vim等")])])]),_._v(" "),v("h3",{attrs:{id:"_14-8086存储信息的基本单位是什么？组织8086存储器的基本单位是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-8086存储信息的基本单位是什么？组织8086存储器的基本单位是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 14.8086存储信息的基本单位是什么？组织8086存储器的基本单位是什么？")]),_._v(" "),v("p",[_._v("存储信息的基本单位是一个"),v("strong",[_._v("二进制位（bit）")]),_._v("，存储器中存储信息的基本单位为字节。")]),_._v(" "),v("h3",{attrs:{id:"_15-内部中断和外部中断的区别是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-内部中断和外部中断的区别是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 15. 内部中断和外部中断的区别是什么？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("外部中断：外部有中断源时执行相应的中断程序，主要是指INT0,INT1,通讯中断")])]),_._v(" "),v("li",[v("p",[_._v("内部中断：指定时器/计数器中断，装栈溢出后置位相关特殊寄存器来执行中断")])])]),_._v(" "),v("h3",{attrs:{id:"_16-芯片组中的各芯片各有什么功能？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-芯片组中的各芯片各有什么功能？","aria-hidden":"true"}},[_._v("#")]),_._v(" 16. 芯片组中的各芯片各有什么功能？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("北桥芯片：与cpu直接相连，形成高速总线并与南桥芯片相连，决定主板的规格和系统的性能；")])]),_._v(" "),v("li",[v("p",[_._v("南桥芯片：形成多种中低速总线和专用连线；")])])]),_._v(" "),v("h3",{attrs:{id:"_17-8086一个总线周期的构成，至少有多少个时钟周期，cpu通过检测什么引脚的信号来决定是否增加tw等待周期。tw等待周期插在哪里？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-8086一个总线周期的构成，至少有多少个时钟周期，cpu通过检测什么引脚的信号来决定是否增加tw等待周期。tw等待周期插在哪里？","aria-hidden":"true"}},[_._v("#")]),_._v(" 17. 8086一个总线周期的构成，至少有多少个时钟周期，CPU通过检测什么引脚的信号来决定是否增加TW等待周期。TW等待周期插在哪里？")]),_._v(" "),v("p",[_._v("一个总线周期至少有"),v("strong",[_._v("4")]),_._v("个时针周期；CPU通过检测"),v("strong",[_._v("READY引脚信号")]),_._v("决定是否增加TW等待周期，若READY为低电平，则表示系统中挂接的存储器或外设不能如期送出数据，要求CPU在"),v("strong",[_._v("T3周期和T4周期")]),_._v("之间插入一个或者几个等待周期Tw，如果READY为高电平，则进入T4周期。")]),_._v(" "),v("h3",{attrs:{id:"_18-sram、dram的区别是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-sram、dram的区别是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 18.SRAM、DRAM的区别是什么？")]),_._v(" "),v("p",[_._v("DRAM:"),v("strong",[_._v("动态")]),_._v("随机存取存储器，"),v("strong",[_._v("需要不断的刷新")]),_._v("，才能保存数据.而且"),v("strong",[_._v("是行列地址复用")]),_._v("的，许多都有页模式")]),_._v(" "),v("p",[_._v("SPAM: "),v("strong",[_._v("静态")]),_._v("的随机存取存储器，加电情况下，"),v("strong",[_._v("不需要刷新")]),_._v("，数据不会丢失，而且，一般"),v("strong",[_._v("不是行列地址复用")]),_._v("的")]),_._v(" "),v("h3",{attrs:{id:"_19-一般程序的基本结构有几种？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-一般程序的基本结构有几种？","aria-hidden":"true"}},[_._v("#")]),_._v(" 19. 一般程序的基本结构有几种？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("循环结构")])]),_._v(" "),v("li",[v("p",[_._v("顺序结构")])]),_._v(" "),v("li",[v("p",[_._v("分支结构")])])]),_._v(" "),v("h3",{attrs:{id:"_20-计算机所能处理信息的最小单位是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-计算机所能处理信息的最小单位是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 20. 计算机所能处理信息的最小单位是什么？")]),_._v(" "),v("p",[_._v("位或bit")]),_._v(" "),v("h3",{attrs:{id:"_21-cache的作用是什么？虚拟存储器的作用是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_21-cache的作用是什么？虚拟存储器的作用是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 21. Cache的作用是什么？虚拟存储器的作用是什么？")]),_._v(" "),v("p",[_._v("Cache,即缓存SRAM。")]),_._v(" "),v("p",[_._v("虚拟存储器处于主存和辅存之间，通过硬件的存储管理单元MMU（使用分页机制、还可以结合分段机制）、在核心软件或操作系统管理下，利用磁盘文件为用户"),v("strong",[_._v("创建了一个比实际主存空间大的虚拟存储空间")]),_._v("。")]),_._v(" "),v("h3",{attrs:{id:"_22-微型计算机数据传递的控制方式主要有哪几种？各有什么特点？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_22-微型计算机数据传递的控制方式主要有哪几种？各有什么特点？","aria-hidden":"true"}},[_._v("#")]),_._v(" 22.  微型计算机数据传递的控制方式主要有哪几种？各有什么特点？")]),_._v(" "),v("p",[_._v("主要有四种：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("程序控制方式：CPU与外设间数据传送是在程序的控制下完成的一种数据传送方式；此方式程序设计简单，硬件软件较省，但费时，CPU效率低，实时性差。主要用于中低速外设和实时性要求不高的场合")])]),_._v(" "),v("li",[v("p",[_._v("中断控制方式：实时性好，不需要反复查询等待，减少cpu等待时间，cpu与外设可并行工作")])]),_._v(" "),v("li",[v("p",[_._v("DMA方式：不需cpu介入，减少了cpu的开销，能实现高速数据块传送，提高了效率，但增加了硬件开销，提高了系统的成本")])]),_._v(" "),v("li",[v("p",[_._v("IOP方式：传送速度快且不需cpu介入，可与cpu并行工作，效率高")])])]),_._v(" "),v("h3",{attrs:{id:"_23-汇编程序的作用是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_23-汇编程序的作用是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 23. 汇编程序的作用是什么？")]),_._v(" "),v("p",[_._v("将源程序（助记符写成的程序）翻译成目标程序（机器语言程序）")]),_._v(" "),v("h3",{attrs:{id:"_24-计算机能够直接执行的程序语言是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_24-计算机能够直接执行的程序语言是什么","aria-hidden":"true"}},[_._v("#")]),_._v(" 24.计算机能够直接执行的程序语言是什么")]),_._v(" "),v("p",[_._v("机器语言")]),_._v(" "),v("h3",{attrs:{id:"_25-为减少引脚数量，8086总线采用了何技术。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_25-为减少引脚数量，8086总线采用了何技术。","aria-hidden":"true"}},[_._v("#")]),_._v(" 25.  为减少引脚数量，8086总线采用了何技术。")]),_._v(" "),v("p",[_._v("部分引脚采用了"),v("strong",[_._v("分时复用方式")]),_._v("，即在同一根引脚上，在不同时间传送不同信息。")]),_._v(" "),v("h3",{attrs:{id:"_26-快闪存储器与一般eeprom的最大差别是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_26-快闪存储器与一般eeprom的最大差别是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 26. 快闪存储器与一般EEPROM的最大差别是什么？")]),_._v(" "),v("p",[_._v("快闪存储器和一般EEPROM的最大差别是"),v("strong",[_._v("擦除速度快")]),_._v("，不再逐个字节进行，而是逐块进行")]),_._v(" "),v("h3",{attrs:{id:"_27-存储器容量单位的换算方法是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_27-存储器容量单位的换算方法是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 27. 存储器容量单位的换算方法是什么？")]),_._v(" "),v("p",[_._v("8 bit(字节) = 1 Byte(字节)")]),_._v(" "),v("p",[_._v("1KB = 1024（2^10）Byte")]),_._v(" "),v("p",[_._v("1MB = 1024 KB")]),_._v(" "),v("p",[_._v("1GB = 1024 MB")]),_._v(" "),v("p",[_._v("1TB = 1024 GB")]),_._v(" "),v("p",[_._v("1FB = 1024 TB")]),_._v(" "),v("h3",{attrs:{id:"_28-微型计算机采用总线结构，按传输的信息不同，总线可分为几种？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_28-微型计算机采用总线结构，按传输的信息不同，总线可分为几种？","aria-hidden":"true"}},[_._v("#")]),_._v(" 28.微型计算机采用总线结构，按传输的信息不同，总线可分为几种？")]),_._v(" "),v("p",[_._v("三种：")]),_._v(" "),v("ul",[v("li",[_._v("地址总线：单向传输地址信号")]),_._v(" "),v("li",[_._v("数据总线：传递数据信息")]),_._v(" "),v("li",[_._v("控制总线：传输对内存和输入输出接口进行控制和状态监测的信号，每条控制线信号单向传输，整体又是双向的，是最复杂最灵活，功能最强的一类总线。")])]),_._v(" "),v("h3",{attrs:{id:"_29-掌握mov中源操作数与目的操作数的寻址方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_29-掌握mov中源操作数与目的操作数的寻址方式","aria-hidden":"true"}},[_._v("#")]),_._v(" 29.掌握mov中源操作数与目的操作数的寻址方式")]),_._v(" "),v("p",[_._v("前面有提及此部分内容，在此不赘述")]),_._v(" "),v("h3",{attrs:{id:"_30-掌握8086-cpu内部寄存器的组成与符号、名称存器。寄存器ip的作用是什么？寄存器flags各标志位的含义是什么？寄存器flags的作用是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_30-掌握8086-cpu内部寄存器的组成与符号、名称存器。寄存器ip的作用是什么？寄存器flags各标志位的含义是什么？寄存器flags的作用是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 30.掌握8086 CPU内部寄存器的组成与符号、名称存器。寄存器IP的作用是什么？寄存器flags各标志位的含义是什么？寄存器flags的作用是什么？")]),_._v(" "),v("p",[_._v("组成与符号等等自行翻书：<<微型计算机原理与应用>>P13，非常详细；")]),_._v(" "),v("p",[_._v("寄存器IP是指令指针，它保存下一条要执行的指令的偏移地址")]),_._v(" "),v("p",[_._v("寄存器flags请翻书P15")]),_._v(" "),v("h3",{attrs:{id:"_31-当rd、wr有效时，数据线上的信号是由cpu（选“发出”或“接收”）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_31-当rd、wr有效时，数据线上的信号是由cpu（选“发出”或“接收”）","aria-hidden":"true"}},[_._v("#")]),_._v(" 31.当RD、wr有效时，数据线上的信号是由CPU（选“发出”或“接收”）")]),_._v(" "),v("p",[_._v("当RD有效时，cpu可以接受数据（读数据）")]),_._v(" "),v("p",[_._v("当WR有效时，cpu可以发出数据（写数据）")]),_._v(" "),v("h3",{attrs:{id:"_32-二进制数与十进制数、十六进制数换算bcd数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_32-二进制数与十进制数、十六进制数换算bcd数","aria-hidden":"true"}},[_._v("#")]),_._v(" 32. 二进制数与十进制数、十六进制数换算BCD数")]),_._v(" "),v("p",[_._v("BCD码：(Binary-Coded Decimal) 亦称二进码十进数或二-十进制代码，用四位二进制数表示一位十进制数。")]),_._v(" "),v("h3",{attrs:{id:"_33-8086-cpu最多可提供的地址线与数据线是多少？8086-cpu组成的微机，其存储器容量最多是多少？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_33-8086-cpu最多可提供的地址线与数据线是多少？8086-cpu组成的微机，其存储器容量最多是多少？","aria-hidden":"true"}},[_._v("#")]),_._v(" 33. 8086 CPU最多可提供的地址线与数据线是多少？8086 CPU组成的微机，其存储器容量最多是多少？")]),_._v(" "),v("p",[_._v("20根地址线，16根数据线，（（寻址空间为1MB")]),_._v(" "),v("h3",{attrs:{id:"_34-奔腾系列微处理器组成的微机，其存储器容量最多是多少？，如果允许扩展寻址的话，存储器容量最多是多少？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_34-奔腾系列微处理器组成的微机，其存储器容量最多是多少？，如果允许扩展寻址的话，存储器容量最多是多少？","aria-hidden":"true"}},[_._v("#")]),_._v(" 34.  奔腾系列微处理器组成的微机，其存储器容量最多是多少？，如果允许扩展寻址的话，存储器容量最多是多少？")]),_._v(" "),v("h3",{attrs:{id:"_35-ram与rom的主要区别有哪些？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_35-ram与rom的主要区别有哪些？","aria-hidden":"true"}},[_._v("#")]),_._v(" 35.  RAM与ROM的主要区别有哪些？")]),_._v(" "),v("p",[_._v("RAM：Random Access Memory(读写存储器)：机器运行期间"),v("strong",[_._v("可读可写")]),_._v("的存储器，断电后存储信息"),v("strong",[_._v("消失")]),_._v("，存取速度"),v("strong",[_._v("非常快")])]),_._v(" "),v("p",[_._v("ROM:  Read Only Memory(只读存储器)：机器运行时"),v("strong",[_._v("只能读不能写入信息")]),_._v("的存储器，断电后存储内容"),v("strong",[_._v("不消失")]),_._v("，存取速度"),v("strong",[_._v("慢")])]),_._v(" "),v("h3",{attrs:{id:"_36-一个cpu支持的最大内存空间大小取决于什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_36-一个cpu支持的最大内存空间大小取决于什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 36. 一个CPU支持的最大内存空间大小取决于什么？")]),_._v(" "),v("p",[_._v("地址线条数")]),_._v(" "),v("h3",{attrs:{id:"_37-cpu的复位信号应符合何种要求？要让cpu开始工作，复位端应如何连接？8086-cpu复位后各寄存器的值是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_37-cpu的复位信号应符合何种要求？要让cpu开始工作，复位端应如何连接？8086-cpu复位后各寄存器的值是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 37 .CPU的复位信号应符合何种要求？要让CPU开始工作，复位端应如何连接？8086 CPU复位后各寄存器的值是什么？")]),_._v(" "),v("p",[_._v("复位信息至少要保持高电平4个时钟周期，才能结束它的当前操作；")]),_._v(" "),v("h3",{attrs:{id:"_38-存储器地址线、数据线与存储空间的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_38-存储器地址线、数据线与存储空间的关系","aria-hidden":"true"}},[_._v("#")]),_._v(" 38. 存储器地址线、数据线与存储空间的关系")]),_._v(" "),v("p",[_._v("存储容量 = 2^地址线的条数")]),_._v(" "),v("h3",{attrs:{id:"_39-高速缓存的组成？各存储器的存取速度的快慢是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_39-高速缓存的组成？各存储器的存取速度的快慢是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 39.高速缓存的组成？各存储器的存取速度的快慢是什么？")]),_._v(" "),v("p",[_._v("由高速SPAM组成，8KB高速SPAM分成4组，每组2KB，每组分成128行，行位置序号为0-127，每行就是一个存储块，存储16字节；")]),_._v(" "),v("h3",{attrs:{id:"_40-现代微机的南、北桥主要功能是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_40-现代微机的南、北桥主要功能是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 40.现代微机的南、北桥主要功能是什么？")]),_._v(" "),v("p",[_._v("南桥芯片：负责形成与"),v("strong",[_._v("中低速设备")]),_._v("的连线，集成了中断控制器、DMA控制器")]),_._v(" "),v("p",[_._v("北桥芯片："),v("strong",[_._v("系统控制芯片")]),_._v("，主要负责"),v("strong",[_._v("CPU与内存")]),_._v("、"),v("strong",[_._v("CPU与PCI-E")]),_._v("之间的通信。掌控项目多为"),v("strong",[_._v("高速设备")]),_._v("，如：CPU、Host Bus。后期北桥集成了内存控制器、Cache高速控制器")]),_._v(" "),v("h3",{attrs:{id:"_41-伪指令与可执行指令的区别是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_41-伪指令与可执行指令的区别是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 41.伪指令与可执行指令的区别是什么？")]),_._v(" "),v("p",[_._v("每一条"),v("strong",[_._v("可执行指令")]),_._v("都必须生成"),v("strong",[_._v("机器代码")]),_._v("，然后在程序运行期间由CPU来执行其操作；")]),_._v(" "),v("p",[_._v("而"),v("strong",[_._v("伪指令")]),_._v("是在汇编期间由"),v("strong",[_._v("汇编程序")]),_._v("执行的操作命令，除了数据定义及存储器分配伪指令分配存储器空间外，其它伪指令不生成目标码；")]),_._v(" "),v("h3",{attrs:{id:"_42-设mov-ax-dx指令已取出，-cpu执行它时-（rd-wr）有效，执行时-和总线打交道（需要-不需要）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_42-设mov-ax-dx指令已取出，-cpu执行它时-（rd-wr）有效，执行时-和总线打交道（需要-不需要）","aria-hidden":"true"}},[_._v("#")]),_._v(" 42. 设MOV  AX,  DX指令已取出， CPU执行它时       （RD/WR）有效，执行时           和总线打交道（需要/不需要）")]),_._v(" "),v("p",[_._v("CPU执行输入指令时，RD有效，执行输出指令时，WR有效，所以这里是输出指令，WR有效；")]),_._v(" "),v("p",[_._v("需要同总线打交道；")]),_._v(" "),v("h3",{attrs:{id:"_43-指令-mov-ax-dx-和-mov-ax-si-中，执行速度较快的是"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_43-指令-mov-ax-dx-和-mov-ax-si-中，执行速度较快的是","aria-hidden":"true"}},[_._v("#")]),_._v(" 43.指令  MOV  AX,  DX 和  MOV AX, [SI]中，执行速度较快的是?")]),_._v(" "),v("p",[v("code",[_._v("MOV AX, DX")]),_._v("是寄存器寻址，而"),v("code",[_._v("MOV AX, [SI]")]),_._v("是寄存器间接寻址，而寄存器寻址是直接将操作数放在寄存器中，寄存器间接寻址则是将操作数地址放在寄存器中，操作数保存在另一个寄存器中，故显然寄存器寻址要更快一些。")]),_._v(" "),v("h3",{attrs:{id:"_44-调用子程序指令及转移指令的执行过程主要有什么区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_44-调用子程序指令及转移指令的执行过程主要有什么区别？","aria-hidden":"true"}},[_._v("#")]),_._v(" 44. 调用子程序指令及转移指令的执行过程主要有什么区别？")]),_._v(" "),v("p",[_._v("调用指令和转移指令都需要跳转到指定地址；它们的区别在于调用指令在调用程序前，需要"),v("strong",[_._v("保存相关寄存器")]),_._v("，程序执行完然后"),v("strong",[_._v("返回原来调用地址")])]),_._v(" "),v("h3",{attrs:{id:"_45-cmos-ram和bios-rom各是什么含义？二者之间是什么关系？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_45-cmos-ram和bios-rom各是什么含义？二者之间是什么关系？","aria-hidden":"true"}},[_._v("#")]),_._v(" 45. CMOS RAM和BIOS ROM各是什么含义？二者之间是什么关系？")]),_._v(" "),v("p",[_._v("CMOS RAM全称为Real Time Clock and CMOS RAM，它是"),v("strong",[_._v("主机板上")]),_._v("完成特殊功能的"),v("strong",[_._v("RAM存储器")]),_._v("（它实际由两部分电路组成：实时时钟电路和256字节的RAM，用于存储实时时间信息和整机系统的配置信息）")]),_._v(" "),v("p",[_._v("BIOS ROM："),v("strong",[_._v("主机板")]),_._v("上完成特殊功能的"),v("strong",[_._v("ROM存储器")]),_._v("（包含两大程序模块：开机加电后直接运行的部分，用户可以调用的部分）")]),_._v(" "),v("p",[_._v("BIOS中的系统设置程序是完成CMOS参数设置的手段；CMOS RAM既是BIOS设定系统参数的存放场所，又是BIOS设定系统参数的结果。总结："),v("strong",[_._v("通过BIOS设置程序对CMOS参数进行设置")])]),_._v(" "),v("h3",{attrs:{id:"_46-dos系统功能调用int21h所调用的程序来自哪里？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_46-dos系统功能调用int21h所调用的程序来自哪里？","aria-hidden":"true"}},[_._v("#")]),_._v(" 46. DOS系统功能调用INT21H所调用的程序来自哪里？")]),_._v(" "),v("h3",{attrs:{id:"_47-bios功能调用所调用的程序来自哪里？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_47-bios功能调用所调用的程序来自哪里？","aria-hidden":"true"}},[_._v("#")]),_._v(" 47.  BIOS功能调用所调用的程序来自哪里？")]),_._v(" "),v("h3",{attrs:{id:"_48-计算机的日期、时间保存在哪里？它们为什么在掉电后依然准确？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_48-计算机的日期、时间保存在哪里？它们为什么在掉电后依然准确？","aria-hidden":"true"}},[_._v("#")]),_._v(" 48.  计算机的日期、时间保存在哪里？它们为什么在掉电后依然准确？")]),_._v(" "),v("p",[_._v("保存在CMOS中；CMOS RAM芯片由系统通过一块后备电池供电，因此无论是在关机状态中，还是遇到系统掉电情况，CMOS信息都不会丢失。")]),_._v(" "),v("h3",{attrs:{id:"_49-外部硬中断分哪几种类型？它们的区别是什么？外部硬中断和子程序调用有什么区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_49-外部硬中断分哪几种类型？它们的区别是什么？外部硬中断和子程序调用有什么区别？","aria-hidden":"true"}},[_._v("#")]),_._v(" 49.  外部硬中断分哪几种类型？它们的区别是什么？外部硬中断和子程序调用有什么区别？")]),_._v(" "),v("p",[_._v("可分为：")]),_._v(" "),v("ul",[v("li",[_._v("可屏蔽中断：受"),v("strong",[_._v("IF")]),_._v("位控制的中断，如果IF=1，微处理器"),v("strong",[_._v("可以屏蔽中断请求")]),_._v("，称为开中断状态，如果IF位为0，就关闭了微处理器响应可屏蔽中断的功能，称为关中断状态；")]),_._v(" "),v("li",[_._v("不可屏蔽中断：不能被CPU用指令CLI（IF位置0）来禁止，一旦出现请求，CPU"),v("strong",[_._v("不可屏蔽")]),_._v("；")])]),_._v(" "),v("p",[_._v("外部硬中断和子程序调用有什么区别：")]),_._v(" "),v("ul",[v("li",[_._v("子程序调用中，什么时候执行子程序都是由程序员自己写（可控）的，而外部硬中断的发生时间和位置我们是不知道的，如果说调用子程序是由主程序主动发起的，那么，进入中断服务程序必须由中断源主动申请，即由中断服务程序主动发起")]),_._v(" "),v("li",[_._v("子程序调用每次只能调用唯一一个子程序，但是在中断系统中往往有多个中断源同时申请中断服务，即有多个中断服务程序同时要求执行的情况发生")]),_._v(" "),v("li",[_._v("子程序通常与调用它的"),v("strong",[_._v("主程序或上一层子程序之间有非常紧密的联系")]),_._v("，而中断服务程序一般与被中断的现行程序之间"),v("strong",[_._v("没有关系")])])]),_._v(" "),v("h3",{attrs:{id:"_50-对于8086，若当-cs-2020h时，物理地址为24200h，则当-cs-6520h时，物理地址应移动到什么地方？此时-ip-？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_50-对于8086，若当-cs-2020h时，物理地址为24200h，则当-cs-6520h时，物理地址应移动到什么地方？此时-ip-？","aria-hidden":"true"}},[_._v("#")]),_._v(" 50.  对于8086，若当(CS)=2020H时，物理地址为24200H，则当(CS)=6520H时，物理地址应移动到什么地方？此时(IP)=？")]),_._v(" "),v("p",[_._v("我们知道，物理地址=段地址*10H+偏移地址")]),_._v(" "),v("p",[_._v("故可知偏移地址=物理地址-段地址*10H = 24200H-20200H = 4000H")]),_._v(" "),v("p",[_._v("当CS = 6520H时，物理地址 = 65200H+4000 = 69200H")]),_._v(" "),v("p",[_._v("而IP是指令指针寄存器，是一个16位寄存器，用来存放代码段中的偏移地址，故（IP）=偏移地址 = 4000H")]),_._v(" "),v("h3",{attrs:{id:"_51-设ax＝4272h，bx-32a2h。执行指令sbb-al，bh之后，ax和标志寄存器的cf、pf、af、sf、zf值分别是多少？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_51-设ax＝4272h，bx-32a2h。执行指令sbb-al，bh之后，ax和标志寄存器的cf、pf、af、sf、zf值分别是多少？","aria-hidden":"true"}},[_._v("#")]),_._v(" 51. 设AX＝4272H，BX=32A2H。执行指令SBB AL，BH之后，AX和标志寄存器的CF、PF、AF、SF、ZF值分别是多少？")]),_._v(" "),v("p",[_._v("P15")]),_._v(" "),v("h3",{attrs:{id:"_52-设：堆栈指针sp的初值为2300h，（ax）＝5000h，（bx）-4200h。执行指令push-ax后，-sp-？，再执行指令push-bx及pop-ax之后，（sp）-？-ax-？-bx-？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_52-设：堆栈指针sp的初值为2300h，（ax）＝5000h，（bx）-4200h。执行指令push-ax后，-sp-？，再执行指令push-bx及pop-ax之后，（sp）-？-ax-？-bx-？","aria-hidden":"true"}},[_._v("#")]),_._v(" 52. 设：堆栈指针SP的初值为2300H，（AX）＝5000H，（BX）=4200H。执行指令PUSH  AX后，(SP)=？，再执行指令PUSH  BX及POP  AX之后，（SP）=？ (AX)=？ (BX)=？")]),_._v(" "),v("p",[_._v("略")]),_._v(" "),v("h3",{attrs:{id:"_53-计算机的系统由硬件和软件两大部分组成。分别指什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_53-计算机的系统由硬件和软件两大部分组成。分别指什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 53. 计算机的系统由硬件和软件两大部分组成。分别指什么？")]),_._v(" "),v("p",[_._v("硬件：构成计算机系统各功能部件的集合，对计算机硬件组成通常描述成四大部分，即运算器、存储器、输入输出设备和控制器；")]),_._v(" "),v("p",[_._v("软件：与计算机系统操作有关的各种"),v("strong",[_._v("程序")]),_._v("，主要是指那些由专业人员编制的、在计算机上运行时增强了计算机功能的程序；")]),_._v(" "),v("h3",{attrs:{id:"_54-8086微处理器是如何实现地址总线和数据总线分时复用的？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_54-8086微处理器是如何实现地址总线和数据总线分时复用的？","aria-hidden":"true"}},[_._v("#")]),_._v(" 54. 8086微处理器是如何实现地址总线和数据总线分时复用的？")]),_._v(" "),v("p",[_._v("首先了解一下分时复用：就是一段时间用做地址总线，一段时间用做数据总线；")]),_._v(" "),v("p",[_._v("如何实现：每次执行存储器读写或对I/O端口进行输入输出操作时，都要用"),v("strong",[_._v("一个总线周期时间")]),_._v("，每个总线周期由"),v("strong",[_._v("几个时钟周期T")]),_._v("组成，在总线周期的"),v("strong",[_._v("T1")]),_._v("期间，总线的低16位作为地址总线，输出地址码A15～A0；而在其他时钟周期T期间，作为双向数据线D15～D0，输入或输出16位数据；")]),_._v(" "),v("h3",{attrs:{id:"_55-cpu与外围设备之间的数据传输要使用接口电路的主要原因是什么？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_55-cpu与外围设备之间的数据传输要使用接口电路的主要原因是什么？","aria-hidden":"true"}},[_._v("#")]),_._v(" 55. CPU与外围设备之间的数据传输要使用接口电路的主要原因是什么？")]),_._v(" "),v("p",[_._v("因为CPU每次只能访问一个外设，因此并行信息的外设需增加选通功能，才能满足CPU的访问要求，必须用接口电路；")])])}],!1,null,null,null);a.default=r.exports}}]);